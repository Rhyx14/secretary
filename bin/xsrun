#!python
import subprocess
from x_secretary import Configuration
from pathlib import Path
import json
from itertools import takewhile,dropwhile
import uuid
import yaml
CFG=Configuration(auto_record=False).add_args([
    ('--template','get template'),
    ('-i','--input',str,None,'the cmd file'),
])

template='''
mode: "plain"
autodl_wechat_api: ['aff6539b84fb','imagenet training complete'] # optional
GUIDs: ["#id1","#id2"] # generate GUID for each commands below
cmds: [
    [
        "ls -l",
        "echo #id1"
    ],
    [
        "ls -l",
        "ls -l"
    ]
]
'''

from x_secretary.utils.autodl import info_wechat_autodl

def get_process(raw_cmd:str,replace_dict:dict):
    _cmd=raw_cmd.split()
    for _i,_param in enumerate(_cmd):
        if _param in replace_dict:
            _cmd[_i]=replace_dict[_param]
    return subprocess.Popen(_cmd)

def run():
    if CFG.input is None:
        raise ValueError('No designated cmd file')
    CFG.input=Path(CFG.input)
    match CFG.input.suffix:
        case '.json':
            batch_info=json.loads(Path.read_text(Path(CFG.input)))
        case '.yaml':
            with open(CFG.input, 'r', encoding='utf-8') as file:
                batch_info = yaml.safe_load(file)
        case _:
            raise NotImplementedError(f'Not support files type {CFG.input.suffix}.')
        
    CFG.update(batch_info)
    
    guid_replace_dict={}
    if 'GUIDs' in batch_info:
        for _str in CFG.GUIDs:
            guid_replace_dict[_str]=str(uuid.uuid1())

    match CFG.mode:
        # 按照配置中的命令的分组执行(严格字面值)，都执行完成后再执行下一组
        case 'plain':
            for _cmd_group in CFG.cmds:
                _process= [get_process(_raw_cmd,guid_replace_dict) for _raw_cmd in _cmd_group]
                for p in _process : p.wait()
        case _:
            raise ValueError(f'Not support mode "{CFG.mode}" yet.')

    if 'autodl_wechat_api' in batch_info:
        info_wechat_autodl(token=CFG.autodl_wechat_api[0],title=CFG.autodl_wechat_api[1])

if CFG.template:
    print(template)
else:
    run()
