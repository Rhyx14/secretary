#!python
import subprocess
from x_secretary.configuration import Configuration
from pathlib import Path
import json
from itertools import takewhile,dropwhile
import uuid

CFG=Configuration().add_args([
    ('--template','get template'),
    ('-i','--input',str,None,'the cmd file'),
])

template='''
{
    "mode":"plain",
    "cmds":[
        "#id1","#id2", // if elements before commands exists, then an idenetial guid will generate for each commands below
        [
            "ls -l",
            "ls -l"
        ],
        [
            "ls -l",
            "ls -l"
        ]
    ]
}
'''

def get_process(raw_cmd:str,replace_dict:dict):
    _cmd=raw_cmd.split()
    for _i,_param in enumerate(_cmd):
        if _param in replace_dict:
            _cmd[_i]=replace_dict[_param]
    return subprocess.Popen(_cmd)

def run():
    if CFG.input is None:
        raise ValueError('No designated cmd file')
    _batch_json=json.loads(Path.read_text(Path(CFG.input)))
    CFG.update(_batch_json)
    match CFG.mode:
        case 'plain':
            _replace_dict={}
            # 按照配置中的命令的分组执行(严格字面值)，都执行完成后再执行下一组
            for _str in takewhile(lambda __obj: isinstance(__obj,str),CFG.cmds):
                _replace_dict[_str]=str(uuid.uuid1())

            for _cmd_group in dropwhile(lambda __obj: isinstance(__obj,str),CFG.cmds):
                _process= [get_process(_raw_cmd,_replace_dict) for _raw_cmd in _cmd_group]
                for p in _process : p.wait()
        case _:
            raise ValueError(f'Not support mode "{CFG.mode}" yet.')
    
if CFG.template:
    print(template)
else:
    run()
